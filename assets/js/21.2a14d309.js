(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{221:function(a,t,s){"use strict";s.r(t);var e=s(0),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h2",{attrs:{id:"docker-核心组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-核心组成"}},[a._v("#")]),a._v(" Docker 核心组成")]),a._v(" "),s("h3",{attrs:{id:"四大组成对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四大组成对象"}},[a._v("#")]),a._v(" 四大组成对象")]),a._v(" "),s("ol",[s("li",[a._v("镜像 (Image) 可以理解为一个只读的文件包，里面包含了 "),s("code",[a._v("虚拟环境运行最原始文件系统的内容")]),a._v("。")]),a._v(" "),s("li",[a._v("容器 (Container) 指 "),s("code",[a._v("隔离出来的虚拟环境")]),a._v("。")]),a._v(" "),s("li",[a._v("网络 (NetWork)")]),a._v(" "),s("li",[a._v("数据卷 (Volume) "),s("code",[a._v("进行数据共享或持久化的文件或目录")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"docker-engine"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-engine"}},[a._v("#")]),a._v(" Docker Engine")]),a._v(" "),s("p",[s("code",[a._v("Docker Engine")]),a._v(" 是一款软件，由多个独立软件所组成，里面最核心的是 "),s("code",[a._v("docker daemon")]),a._v(" 和 "),s("code",[a._v("docker CLI")]),a._v("。")]),a._v(" "),s("p",[s("code",[a._v("docker daemon")]),a._v(" 提供容器管理、应用编排、镜像分发等功能，通常以服务的形式运行以便静默的提供这些功能，所以通常称之为 "),s("code",[a._v("docker 服务")]),a._v("。")]),a._v(" "),s("p",[s("code",[a._v("docker daemon")]),a._v(" 对外暴露了一套 "),s("code",[a._v("RESTful API")]),a._v(" ，通过这套 API 可以对其中运行的容器和其它资源进行管理。"),s("code",[a._v("docker CLI")]),a._v(" 正是操作这些 API 的工具。")]),a._v(" "),s("h2",{attrs:{id:"centos-安装-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#centos-安装-docker"}},[a._v("#")]),a._v(" CentOS 安装 docker")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("  yum "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" yum-utils device-mapper-persistent-data lvm2\n\n  yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n  yum "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("install")]),a._v(" docker-ce\n\n  systemctl "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("enable")]),a._v(" docker // 服务开机自启动\n\n  systemctl start docker // 启动 docker 服务\n\n  systemctl restart docker // 重启\n\n  docker version // 版本信息\n\n  docker info // docker 信息\n\n  docker images // 查看镜像信息\n\n  docker search "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("image"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" // 搜索镜像\n\n  docker inspect "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("docker 对象"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" // 查看 docker 对象的详细信息，如镜像、容器等。\n\n  docker rmi "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("镜像名或镜像ID"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" // 删除镜像\n\n  docker create --name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("容器名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("镜像名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" // 创建镜像 --name 可选\n\n  docker start "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("容器名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" // 启动容器\n\n  docker run --name "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("容器名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" -d "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("镜像名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" // 合并 create start 两个命令 -d 使启动后程序与控制台分离\n\n  docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -a // 容器列表\n\n  docker stop "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("容器名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" // 停止容器 容器内部修改和沙盒环境还是存在\n\n  docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("镜像名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" // 删除容器 -f 强制删除\n\n  docker "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" // 让容器执行命令\n\n  docker "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -it "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("容器名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v(" // 开启容器的 Bash，从而进入容器进行控制 -i 保持输入流，保证正确识别命令 -t 启用伪终端\n\n  docker attach "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("容器名"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" // 将当前输入输出流连接到指定的容器上\n")])])]),s("p",[a._v("设置国内镜像源：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("  // etc/docker/daemon.json\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"registry-mirrors"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"https://registry.docker-cn.com"')]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("h2",{attrs:{id:"镜像与容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像与容器"}},[a._v("#")]),a._v(" 镜像与容器")]),a._v(" "),s("h3",{attrs:{id:"镜像的命名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#镜像的命名"}},[a._v("#")]),a._v(" 镜像的命名")]),a._v(" "),s("ol",[s("li",[a._v("username 主要用于识别上传镜像的不同用户，与 "),s("code",[a._v("Github")]),a._v(" 的用户空间类似。")]),a._v(" "),s("li",[a._v("repository 主要用于识别镜像的内容，形成对镜像的表意描述。")]),a._v(" "),s("li",[a._v("tag 主要用于表示镜像的版本，方便区分镜像内容的不同细节。")])]),a._v(" "),s("h3",{attrs:{id:"容器的几个核心状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器的几个核心状态"}},[a._v("#")]),a._v(" 容器的几个核心状态")]),a._v(" "),s("ol",[s("li",[a._v("Created 容器已创建，资源准备就绪。")]),a._v(" "),s("li",[a._v("Running 容器正在运行。")]),a._v(" "),s("li",[a._v("Paused 容器已暂停。")]),a._v(" "),s("li",[a._v("Stopped 容器停止，占用的资源及沙盒环境依然存在，只是应用程序停止。")]),a._v(" "),s("li",[a._v("Deleted 容器已删除，占用资源及存储在 "),s("code",[a._v("docker")]),a._v(" 中的管理信息都已释放和移除。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/9/17/165e53743e730432?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"Request"}})]),a._v(" "),s("h3",{attrs:{id:"容器网络模型-container-network-model"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#容器网络模型-container-network-model"}},[a._v("#")]),a._v(" 容器网络模型 ( Container Network Model)")]),a._v(" "),s("p",[a._v("在 "),s("code",[a._v("Docker")]),a._v(" 网络中，有三个比较核心的概念，也就是 "),s("code",[a._v("沙盒 Sandbox")]),a._v("，"),s("code",[a._v("网络 Network")]),a._v("，"),s("code",[a._v("端点 Endpoint")]),a._v("。")]),a._v(" "),s("p",[s("code",[a._v("沙盒")]),a._v("提供了容器的虚拟网络栈，也就是端口套接字、IP路由表、防火墙等内容。其实现隔离了容器网络与宿主机网络，形成了完全独立的容器网络环境。")]),a._v(" "),s("p",[s("code",[a._v("网络")]),a._v("可以理解为 "),s("code",[a._v("Docker")]),a._v(" 内部的虚拟子网，网络内的参与者相互可见并能够进行通讯，"),s("code",[a._v("Docker")]),a._v(" 的这种虚拟网络也是与宿主机网络存在隔离关系的，其目的主要是形成容器间的安全通讯环境。")]),a._v(" "),s("p",[s("code",[a._v("端点")]),a._v("是位于容器或网络隔离墙之上的洞，其主要目的是形成一个可以控制的突破封闭的网络环境的出入口，当容器的端点与网络的端点形成配对后，就如同在这两者之间搭建了桥梁，便能够进行数据传输了。")]),a._v(" "),s("p",[a._v("处于不同网络之中的容器无法互联。")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("  // 容器互联\n  docker run -d --name mysql -e "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MYSQL_RANDOM_ROOT_PASSWORD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("yes mysql\n  docker run -d --name webapp --link mysql webapp:latest\n\n  String url "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"jdbc:mysql://mysql:3306/webapp"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" // jdbc 连接\n\n  docker run -d --name mysql -e "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MYSQL_RANDOM_ROOT_PASSWORD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("yes --expose "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("13306")]),a._v(" --expose "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("23306")]),a._v(" mysql:5.7 // --export 暴露端口\n\n  // 通过别名连接\n  docker run -d --name webapp --link mysql:database webapp:latest // --link "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("alias"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n  String url "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"jdbc:mysql://database:3306/webapp"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n  // 创建网络\n  // 默认创建一个 bridge 网络，没有指定容器网络时都会连接到其中\n  docker network create -d bridge individual // -d 指定网络驱动类型\n  \n  docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" // 查看网络\n\n  docker run -d --name mysql -e "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MYSQL_RANDOM_ROOT_PASSWORD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("yes --network individual mysql:5.7 // --network 指定网络\n\n  // 端口映射 将容器的端口映射到宿主机上\n  // -p "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("ip"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("host-port"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("container-port"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" ip为宿主操作系统的兼容ip，默认 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.0")]),a._v(".0.0\n  docker run -d --name nginx -p "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("80")]),a._v(":80 -p "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("443")]),a._v(":443 nginx:1.12\n")])])]),s("h3",{attrs:{id:"管理和存储数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#管理和存储数据"}},[a._v("#")]),a._v(" 管理和存储数据")]),a._v(" "),s("p",[s("code",[a._v("Docker")]),a._v(" 容器文件系统基于 "),s("code",[a._v("UnionFS")]),a._v("，由于 "),s("code",[a._v("UnionFS")]),a._v(" 支持挂载不同类型的文件系统到统一的目录结构中，所以我们只需要将宿主操作系统中，文件系统里的文件或目录挂载到容器中，便能够让容器内外共享这个文件。通过这种方式互通容器内外的文件，那么文件数据持久化和操作容器内文件的问题就解决了。")]),a._v(" "),s("p",[s("code",[a._v("Docker")]),a._v(" 提供三种适用于不同场景的文件系统挂载方式。")]),a._v(" "),s("ol",[s("li",[a._v("Bind Mount")]),a._v(" "),s("li",[a._v("Volume")]),a._v(" "),s("li",[a._v("Tmpfs Mount")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("  // 挂载文件到容器\n  // -v "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("host-path"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("container-path"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n  docker run -d --name nginx -v /webapp/html:/usr/share/nginx/html:ro nginx:1.12\n\n  // 临时挂载\n  docker run -d --name webapp --tmpfs /webapp/cache webapp:latest // 无需指定内容位置，只指定挂载到容器内的目录\n\n  // 使用数据卷 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("Volumn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  // 无需只调数据存储在宿主机的哪个地方\n  // 只需给定容器中的哪个目录会被挂载\n  docker run -d --name webapp -v /webapp/storage webapp:latest\n\n  // -v "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("container-path"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 命名数据卷\n  docker run -d --name webapp -v appdata:/webapp/storage webapp:latest\n\n  // 共用数据卷\n  docker run -d --name webapp -v html:/webapp/html webapp:latest\n  docker run -d --name nginx -v html:/usr/share/nginx/html:ro nginx:1.12\n\n  // 创建数据卷\n  docker volumn create "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n  docker volumn "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" // 列表\n\n  // 删除数据卷\n  docker volumn "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n  docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" -v "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("container name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" // 删除容器时删除关联的数据卷\n\n  docker volumn prune // 删除没有被引用的数据卷\n  \n  // 数据卷容器\n  docker run -d --name webapp --volumes-from appdata webapp:latest\n\n  // 备份和迁移数据卷\n\n  // --mount 执行挂载\n  // 可以使用参数\n  docker run -d --name webapp webapp:latest --mount "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'type=volume,src=appdata,dst=/webapp/storage,volume-driver=local,volume-opt=type=nfs,volume-opt=device=<nfs-server>:<nfs-path>'")]),a._v(" webapp:latest\n")])])]),s("h3",{attrs:{id:"保存和共享镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保存和共享镜像"}},[a._v("#")]),a._v(" 保存和共享镜像")]),a._v(" "),s("p",[s("code",[a._v("Docker")]),a._v(" 可以将容器中可读可写的沙盒环境持久化为一个镜像层，也就是把容器内的修改记录下来，保存为一个新的镜像。")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("  docker commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'message'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("容器名"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n  docker commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'message'")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("容器名"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("镜像名"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" // 提交更改时指定镜像名\n\n  // docker tag 为镜像命名\n  docker tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("Image Id"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("Image Name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n  docker tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("old Image Name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("New Image Name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" // 创建新命名，两个镜像名指向同一个镜像\n\n  // 导出镜像\n  docker save webapp:1.0 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" webapp-1.0-tar\n\n  docker save -o ./webapp-1.0.tar webapp:1.0 // -o 指定导入文件\n\n  // 导入镜像\n  docker load "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" webapp-1.0.tar\n  docker load -i webapp-1.0.tar // 使用 -i 导入\n\n  // 批量迁移镜像\n  docker save -o ./images.tar image1 image2 image3\n\n  // 导出容器\n  docker "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" -o ./webapp.tar "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("Container Name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n  // 导入容器\n  // 并非直接导入容器，而是将容器运行时的内容以镜像导入\n  docker "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("import")]),a._v(" ./webapp.tar "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("Image Name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n")])])]),s("p",[a._v("除了直接以文件方式导入、导出镜像外，还可以将镜像上传到仓库，然后 "),s("code",[a._v("docker pull")]),a._v(" 拉取镜像，实现共享。")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://docs.docker.com/docker-hub/repos/",target:"_blank",rel:"noopener noreferrer"}},[a._v("docker-repos"),s("OutboundLink")],1)]),a._v(" "),s("h3",{attrs:{id:"使用-dockerfile-创建镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-dockerfile-创建镜像"}},[a._v("#")]),a._v(" 使用 Dockerfile 创建镜像")]),a._v(" "),s("p",[s("code",[a._v("Dockerfile")]),a._v(" 是用于定义镜像自动化构建流程的配置文件。")]),a._v(" "),s("p",[s("code",[a._v("Dockerfile")]),a._v(" 的指令简单分为五大类。")]),a._v(" "),s("ol",[s("li",[a._v("基础指令 用于定义新镜像的基础和性质。")]),a._v(" "),s("li",[a._v("控制指令 是指导镜像构建的核心部分，用于描述镜像在构建过程中需要执行的命令。")]),a._v(" "),s("li",[a._v("引入指令 用于将外部文件直接引入到构建镜像内部。")]),a._v(" "),s("li",[a._v("执行指令 能够为基于镜像所创建的容器，指定在启动时需要执行的脚本或命令。")]),a._v(" "),s("li",[a._v("配置指令 对镜像以及基于镜像所创建的容器，可以通过配置指令对其网络、用户等内容进行配置。")])]),a._v(" "),s("p",[a._v("常用指令：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("  // FROM 指定基础镜像\n  FROM "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("image"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("AS "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  FROM "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("image"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("tag"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("AS "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  FROM "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("image"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("@"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("digest"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("AS "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n  // RUN 向控制台发送命令\n  // 支持 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v(" 换行\n  RUN "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("command"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n  RUN "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"executable"')]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"param1"')]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"param2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n  // ENTRYPOINT "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" CMD\n  // 指定命令，在容器启动时启动进程号为1的进程\n  ENTRYPOINT "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"executable"')]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"param1"')]),a._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"param2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  ENTRYPOINT "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("command")]),a._v(" param1 param2\n\n  CMD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"executable"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"param1"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"param2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  CMD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"param1"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"param2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  CMD "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("command")]),a._v(" param1 param2\n\n  // EXPOSE 指定暴露的端口\n  EXPOSE "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("port"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("port"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("/"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("protocol"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n  // VOLUME 定义基于此镜像的容器所自动建立的数据卷\n  VOLUME "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/data"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n  // COPY "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("&&")]),a._v(" ADD\n  // 从宿主机文件系统中拷贝内容到镜像里的文件系统中\n  COPY "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("--chown"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("group"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("dest"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n  ADD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("--chown"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("group"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("src"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("dest"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n\n  COPY "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("--chown"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("group"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<src>"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<dest>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n  ADD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("--chown"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("user"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(":"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("group"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<src>"')]),a._v(","),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(". "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"<dest>"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),s("p",[a._v("构建镜像：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("  docker build "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("构建环境目录"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" // 默认在此目录下创建，在此目录下寻找 Dockerfile 文件\n\n  // -t 指定新生成镜像名称\n  // -f 指定 Dockerfile 文件路径\n  docker build -t webapp:latest -f ./webapp/a.Dockerfile ./webapp\n")])])]),s("p",[a._v("使用技巧：")]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("    // ARG 声明变量\n    // "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${xxx}")]),a._v(" 使用变量\n    // docker --build-arg 传入变量\n    docker build --build-arg "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("TOMCAT_MAJOR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(" --build-arg "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("TOMCAT_VERSION")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8.0")]),a._v(".53 -t tomcat:8.0 ./tomcat\n\n    // ENV arg_name arg_value\n    // 定义环境变量\n    // -e --env 修改环境变量的值\n    docker run -e "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("MYSQL_ROOT_PASSWORD")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("my-secret-pw -d mysql:5.7\n\n    // --no-cache 禁用构建缓存\n    docker build --no-cache ./webapp\n")])])]),s("h3",{attrs:{id:"docker-compose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[a._v("#")]),a._v(" Docker Compose")]),a._v(" "),s("p",[s("code",[a._v("Docker Compose")]),a._v(" 多容器的定义和运行软件，将多个容器运行的方式和配置固化下来。")]),a._v(" "),s("p",[a._v("使用步骤可以简化为三步：")]),a._v(" "),s("ol",[s("li",[a._v("如果需要的话，编写容器所需镜像的 "),s("code",[a._v("Dockerfile")])]),a._v(" "),s("li",[a._v("编写用于配置容器的 "),s("code",[a._v("docker-compose.yml")])]),a._v(" "),s("li",[a._v("使用 "),s("code",[a._v("docker-compose")]),a._v(" 命令启动应用")])]),a._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[a._v("  // -f 指定 docker-compose 配置文件\n  // -d 转入后台运行"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n  // -p 定义项目名称\n  docker-compose -f ./compose/docker-compose.yml -p myapp up -d\n\n  docker-compose down\n")])])]),s("h3",{attrs:{id:"应用于服务化开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用于服务化开发"}},[a._v("#")]),a._v(" 应用于服务化开发")]),a._v(" "),s("p",[a._v("需要搭建 "),s("code",[a._v("Overlay Network")]),a._v("，跨越物理主机的限制，让多个处于不同 "),s("code",[a._v("docker daemon")]),a._v(" 实例中的容器连接到同一个网络，并且让这些容器感觉这个网络与其他类型的网络没有区别。从而实现服务间互连。")]),a._v(" "),s("p",[a._v("可以使用 "),s("code",[a._v("Docker Swarm")]),a._v(" 实现。")]),a._v(" "),s("p",[a._v("在真实的服务部署里，通常是使用 "),s("code",[a._v("Docker Compose")]),a._v(" 来的定义集群，通过 "),s("code",[a._v("Docker Swarm")]),a._v(" 来部署集群。或者使用 "),s("code",[a._v("Kubernetes(k8s)")]),a._v("。"),s("code",[a._v("k8s")]),a._v(" 与这两者的组合相比，功能更强大。")]),a._v(" "),s("h2",{attrs:{id:"相关名词解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关名词解释"}},[a._v("#")]),a._v(" 相关名词解释")]),a._v(" "),s("h3",{attrs:{id:"rpm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rpm"}},[a._v("#")]),a._v(" RPM")]),a._v(" "),s("p",[s("code",[a._v("RPM")]),a._v(" 是 "),s("code",[a._v("Red-Hat Package Manager")]),a._v(" (RPM包管理器) 的缩写，这一文件格式名称虽然打上了 "),s("code",[a._v("RedHat")]),a._v(" 的标志，但是其原始设计理念是开放式的，可以算是公认的行业标准了。")]),a._v(" "),s("h3",{attrs:{id:"yum"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#yum"}},[a._v("#")]),a._v(" yum")]),a._v(" "),s("p",[s("code",[a._v("Yum")]),a._v(" 全称为 "),s("code",[a._v("Yellow dog Updater Modified")]),a._v("，是一个在 "),s("code",[a._v("Fedoral")]),a._v(" 和 "),s("code",[a._v("RedHat")]),a._v(" 以及 "),s("code",[a._v("CentOs")]),a._v(" 中的 "),s("code",[a._v("Shell")]),a._v(" 前端软件包管理器，基于 "),s("code",[a._v("RPM")]),a._v(" 包管理，能够从指定的服务器自动下载 "),s("code",[a._v("RPM")]),a._v(" 包并且安装，可以自动化处理依赖性关系，并且一次安装所有依赖的软件包，无须频繁地一次次下载、安装。")]),a._v(" "),s("h3",{attrs:{id:"device-mapper-persistent-data-lvm2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#device-mapper-persistent-data-lvm2"}},[a._v("#")]),a._v(" device-mapper-persistent-data && lvm2")]),a._v(" "),s("p",[a._v("用于存储设备映射 ("),s("code",[a._v("devicemapper")]),a._v(") 必须的两个软件包。")]),a._v(" "),s("h3",{attrs:{id:"device-mapper"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#device-mapper"}},[a._v("#")]),a._v(" Device mapper")]),a._v(" "),s("p",[s("code",[a._v("devicemapper")]),a._v(" 是内核中支持逻辑卷管理的通用设备映射机制，它为实现用于存储资源管理的块设备驱动提供了一个高度模块化的内核架构，它包包含三个重要的对象概念："),s("code",[a._v("Mapped Device")]),a._v("，"),s("code",[a._v("Mapping Table")]),a._v("，"),s("code",[a._v("Target Device")]),a._v("。")]),a._v(" "),s("hr"),a._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.im/book/5b7ba116e51d4556f30b476c",target:"_blank",rel:"noopener noreferrer"}},[a._v("开发者必备的 Docker 实践指南"),s("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);